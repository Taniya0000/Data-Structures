/*
Merge sort is defined as a sorting algorithm that works by dividing an array into smaller subarrays,
sorting each subarray, and then merging the sorted subarrays back together to form the final sorted array.
*/

class Solution
{
    void merge(int arr[], int low, int mid, int high)
    {
        ArrayList<Integer> tempList = new ArrayList<>();
        int left = low;
        int right = mid+1;
        while((left <= mid) && (right <= high)){
            if(arr[left] <= arr[right]){
                tempList.add(arr[left]);
                left++;
            } else{
                tempList.add(arr[right]);
                right++;
            }
        }
        while(left <= mid){
            tempList.add(arr[left]);
            left++;
        }
        while (right <= high){
            tempList.add(arr[right]);
            right++;
        }
        for(int i=low; i<=high; i++){
            arr[i] = tempList.get(i-low);
        } 
    }
    
    void mergeSort(int arr[], int low, int high)
    {
       if(low >= high) return;
        int mid = (low + high)/2;
        mergeSort(arr, low, mid);
        mergeSort(arr, mid+1, high);
        merge(arr, low, mid, high);
    }
}
